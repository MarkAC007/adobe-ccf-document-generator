name: Docker Build and Publish

on:
  push:
    branches: [ "main", "dev" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

# Add permissions block
permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: markac007/adobe-ccf-policy-generator
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: ${{ github.event_name == 'pull_request' }}

      # Install Docker Scout CLI
      - name: Install Docker Scout
        if: github.event_name == 'pull_request'
        run: |
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
          chmod +x install-scout.sh
          ./install-scout.sh

      # Run Docker Scout Quickview and prepare PR comment
      - name: Run Docker Scout Quickview
        if: github.event_name == 'pull_request'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Get the first tag (PR tag) from the metadata
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "Analyzing image: $IMAGE_TAG"
          
          # Run quickview and save output
          docker scout quickview $IMAGE_TAG > scout-quickview.txt
          
          # Format the output as a markdown comment
          echo "## Docker Image" > pr-comment.md
          echo "Image to test: \`$IMAGE_TAG\`" >> pr-comment.md
          echo "" >> pr-comment.md
          echo "## Docker Scout Security Analysis" >> pr-comment.md
          echo "\`\`\`" >> pr-comment.md
          cat scout-quickview.txt >> pr-comment.md
          echo "\`\`\`" >> pr-comment.md
          echo "" >> pr-comment.md
          echo "This is an informational security scan. Please review any findings." >> pr-comment.md

      # Post comment on PR
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr-comment.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # Upload scan results
      - name: Upload scan results
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: docker-scout-results
          path: scout-quickview.txt